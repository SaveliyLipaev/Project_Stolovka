// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StolovkaWebAPI.Data;

namespace StolovkaWebAPI.Migrations
{
    [DbContext(typeof(StolovkaDbContext))]
    [Migration("20191225124341_init_migr_stolovka_db")]
    partial class init_migr_stolovka_db
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("StolovkaWebAPI.Domain.Canteens", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Worktime")
                        .IsRequired()
                        .HasColumnName("worktime")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("canteens");
                });

            modelBuilder.Entity("StolovkaWebAPI.Domain.Cards", b =>
                {
                    b.Property<string>("CardNumberCrypted")
                        .HasColumnName("card_number_crypted")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnName("added_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RecognizeableName")
                        .HasColumnName("recognizeable_name")
                        .HasColumnType("character varying");

                    b.HasKey("CardNumberCrypted")
                        .HasName("cards_pkey");

                    b.ToTable("cards");
                });

            modelBuilder.Entity("StolovkaWebAPI.Domain.Cashiers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CanteenId")
                        .IsRequired()
                        .HasColumnName("canteen_id")
                        .HasColumnType("character varying");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnName("login")
                        .HasColumnType("character varying(65)")
                        .HasMaxLength(65);

                    b.Property<string>("PasswordCrypted")
                        .IsRequired()
                        .HasColumnName("password_crypted")
                        .HasColumnType("character varying");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnName("role")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("CanteenId");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasName("cashiers_login_key");

                    b.ToTable("cashiers");
                });

            modelBuilder.Entity("StolovkaWebAPI.Domain.Dishes", b =>
                {
                    b.Property<string>("DishId")
                        .HasColumnName("dish_id")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CanteenId")
                        .IsRequired()
                        .HasColumnName("canteen_id")
                        .HasColumnType("character varying");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnName("dish_name")
                        .HasColumnType("character varying(65)")
                        .HasMaxLength(65);

                    b.Property<decimal>("DishPrice")
                        .HasColumnName("dish_price")
                        .HasColumnType("numeric");

                    b.HasKey("DishId")
                        .HasName("dishes_pkey");

                    b.HasIndex("CanteenId");

                    b.ToTable("dishes");
                });

            modelBuilder.Entity("StolovkaWebAPI.Domain.Orders", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CanteenId")
                        .IsRequired()
                        .HasColumnName("canteen_id")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnName("processed_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("character varying");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("OrderId")
                        .HasName("orders_pkey");

                    b.HasIndex("CanteenId");

                    b.HasIndex("UserId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("StolovkaWebAPI.Domain.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Card")
                        .HasColumnName("card")
                        .HasColumnType("character varying");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying");

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasColumnType("character varying(65)")
                        .HasMaxLength(65);

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasColumnType("character varying(65)")
                        .HasMaxLength(65);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("token")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("Card");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("users_email_key");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasName("users_token_key");

                    b.ToTable("users");
                });

            modelBuilder.Entity("StolovkaWebAPI.Domain.Cashiers", b =>
                {
                    b.HasOne("StolovkaWebAPI.Domain.Canteens", "Canteen")
                        .WithMany("Cashiers")
                        .HasForeignKey("CanteenId")
                        .HasConstraintName("cashiers_canteen_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("StolovkaWebAPI.Domain.Dishes", b =>
                {
                    b.HasOne("StolovkaWebAPI.Domain.Canteens", "Canteen")
                        .WithMany("Dishes")
                        .HasForeignKey("CanteenId")
                        .HasConstraintName("dishes_canteen_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("StolovkaWebAPI.Domain.Orders", b =>
                {
                    b.HasOne("StolovkaWebAPI.Domain.Canteens", "Canteen")
                        .WithMany("Orders")
                        .HasForeignKey("CanteenId")
                        .HasConstraintName("orders_canteen_id_fkey")
                        .IsRequired();

                    b.HasOne("StolovkaWebAPI.Domain.Users", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("orders_user_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("StolovkaWebAPI.Domain.Users", b =>
                {
                    b.HasOne("StolovkaWebAPI.Domain.Cards", "CardNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Card")
                        .HasConstraintName("users_card_fkey");
                });
#pragma warning restore 612, 618
        }
    }
}
